@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        Hello, @_name!
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {


    [Inject]
    private AuthenticationStateProvider? LocalAuthenticationStateProvider { get; set; }

    protected string _name = "";
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserData();
    }

    private async Task GetUserData()
    {
        var authState = await LocalAuthenticationStateProvider!.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            _name = user.Claims.First(c => c.Type.Contains("given_name")).Value;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }
}
